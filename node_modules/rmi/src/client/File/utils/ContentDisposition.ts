/// <amd-module name='File/utils/ContentDisposition' />

/**
 * Класс для разбора заголовков Content-Disposition ответа (см. https://tools.ietf.org/html/rfc6266)
 * @property {string} filename
 * @property {string} type
 */
export default class ContentDisposition {
    public readonly filename: string;
    public readonly type: string;
    /** Разделитель параметров */
    private separator = ';';
    private readonly header: string;

    /** @param header оригинальный заголовок */
    constructor(header: string) {
        this.header = header || '';
        this.type = this.getType();
        this.filename = this.getFilename();
    }

    private getFilename(): string {
        /** если передан "filename*", "filename" игнорируется */
        if (this.header.indexOf('filename*=') !== -1) {
            return decodeFilename(this.getValueOf('filename*='));
        }
        return this.getValueOf('filename=');
    }

    private getType(): string {
        /** Т.к тип передается первым неименнованным параметром */
        return this.getValueOf('');
    }

    /** Вытаскивает из заголовка значение параметра */
    public getValueOf(param: string) {
        const lowCaseHeader = this.header.toLowerCase();
        const paramBegin = lowCaseHeader.indexOf(param) + param.length;
        const paramEnd = lowCaseHeader.indexOf(this.separator, paramBegin);
        const value = (paramEnd !== -1) ? this.header.substring(paramBegin, paramEnd) : this.header.substr(paramBegin);
        return value.replace(/"/g, ''); // удаляем дв.кавычки
    }
}

/**
 * Возвращет декодированное значение filename
 * Для декодирования используется кодировка страницы,
 * т.к тянуть сторонние декодировщики накладно
 */
function decodeFilename(name: string): string {
    const [charset, lang, filename] = name.split(`'`);
    return decodeURIComponent(filename);
}

/// <amd-module name="SbisEnv/_Error/Controller" />
// @ts-ignore
import * as Control from 'Core/Control';
import * as tmpl from 'wml!SbisEnv/_Error/Controller';
// @ts-ignore
import Dialog from 'SbisEnv/_Error/Dialog';
import IErrorController from 'SbisEnv/_Error/IController';
import { Handler, HandlerConfig, HandlerResult } from 'SbisEnv/_Error/Handler';
import { Mode } from 'SbisEnv/_Error/Const';
import 'css!SbisEnv/_Error/Controller';
// @ts-ignore
import { Abort } from 'Transport/Errors';

type Config = {
    handlers: Array<Handler>
}

/**
 * Компонент отвечающий за обработку ошибок
 * @class SbisEnv/_Error/Controller
 * @example
 * Template:
 * <pre>
 *     <SbisEnv.Error:Controller
 *         name="errorController"
 *     />
 * </pre>
 *
 * <pre>
 *     let errorController = this._children.errorController;
 *     let handler = ({ error, mode }) => {
 *         if (error.code == 423) {
 *             return {
 *                 template: LockedErrorTemplate,
 *                 options: {
 *                     // ...
 *                 }
 *             }
 *         }
 *     };
 *     errorController.addHandler(handler);
 *
 *     this.load().catch((error) => {
 *         errorController.errorHandling(error)
 *     })
 * </pre>
 */
export default class Controller extends Control implements IErrorController {
    protected _handlers: Array<Handler>;
    protected _template = tmpl;
    private __page;
    private __pageOption: object;
    constructor(config: Config) {
        super(config);
        this._handlers = config.handlers || [];
    }
    addHandler(handler: Handler): void {
        if (this._handlers.indexOf(handler) >= 0) {
            return;
        }
        this._handlers.push(handler);
    }
    removeHandler(handler: Handler): void {
        this._handlers = this._handlers.filter((_handler) => {
            return handler !== _handler;
        })
    }
    errorHandling<T extends Error = Error>(config: HandlerConfig<T> | T) {
        let _config = this.__getConfig(config);
        if (!this.__needHandling(_config.error)) {
            return;
        }
        let { template, options, mode } = this.__findTemplate(_config);
        let newMode: Mode = mode || _config.mode;
        if (newMode == Mode.page) {
            return this.__showError(template, options);
        }

        /*
         * Показывать ошибку внутри компонента можем только тогда, когда от него передан метод отрисовки
         * Поэтому, когда какой-либо обработчик ошибки решит поменять отображение
         * с диалогового на страничное или наоборот, то всё ок,
         * если обработчик решит выставить оотображение внутри компонента, который это не поддерживает,
         * то игнорим то что хочет обработчик, показываем то что выставил сам компонент
         */
        if (_config.mode == Mode.include) {
            return _config.showError(template, options);
        }
        return this.__showModal(template, options);
    }
    private __getConfig<T extends Error = Error>(config: HandlerConfig<T> | T): HandlerConfig<T> {
        if (config instanceof Error) {
            return {
                error: <T>config,
                mode: Mode.dialog
            }
        }
        return {
            mode: Mode.dialog,
            ...config
        }
    }
    private __getApplicationHandlers(): Array<Handler> {
        // TODO get from Application.Config
        return []
    }
    private __findTemplate<T extends Error = Error>(config: HandlerConfig<T>): HandlerResult {
        let handlers = [].concat(this._handlers, this.__getApplicationHandlers());
        for (let i in handlers) {
            if (!handlers.hasOwnProperty(i)) {
                continue;
            }
            let handler = handlers[i];
            let result = handler(config);
            if (result) {
                return result;
            }
        }
        return this.__getDefaultTemplate(config);
    }
    private __getDefaultTemplate<T extends Error = Error>(config: HandlerConfig<T>): HandlerResult {
        // TODO
        return {
            template: '',
            options: {}
        }
    }
    private __needHandling(error: Error): boolean {
        return !(
            (error instanceof Abort) ||
            // @ts-ignore
            error.processed ||
            // @ts-ignore
            error.canceled
        )
    }
    private __showError(tmpl, config) {
        this.__pageOption = config;
        this.__page = tmpl;
        // @ts-ignore
        this._forceUpdate();
    }
    private __showModal(template, templateOptions) {
        // @ts-ignore
        this._children.dialog.open({
            template: Dialog,
            templateOptions: {
                template,
                templateOptions
            },
        });
    }
}

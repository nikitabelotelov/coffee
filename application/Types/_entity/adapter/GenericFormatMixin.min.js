define("Types/_entity/adapter/GenericFormatMixin",["require","exports","Types/_entity/format"],function(e,t,d){"use strict";Object.defineProperty(t,"__esModule",{value:true});var i={"[Types/_entity/adapter/GenericFormatMixin]":true,_data:null,_sharedFieldFormat:null,_sharedFieldMeta:null,constructor:function(e){this._data=e},getData:function(){return this._data},getFields:function(){throw new Error("Method must be implemented")},getFormat:function(e){var t=this._getFieldsFormat(),i=t?t.getFieldIndex(e):-1;if(-1===i)throw new ReferenceError(this._moduleName+'::getFormat(): field "'+e+"\" doesn't exist");return t.at(i)},getSharedFormat:function(e){if(null===this._sharedFieldFormat)this._sharedFieldFormat=new d.UniversalField;var t=this._sharedFieldFormat,i=this._getFieldsFormat(),r=i?i.getFieldIndex(e):-1;return t.name=e,t.type=-1===r?"String":i.at(r).getType(),t.meta=-1===r?{}:this._getFieldMeta(e),t},addField:function(e,t){if(!e||!(e instanceof d.Field))throw new TypeError(this._moduleName+"::addField(): format should be an instance of Types/entity:format.Field");var i=e.getName();if(!i)throw new Error("{$this._moduleName}::addField(): field name is empty");var r=this._getFieldsFormat(),a;if((r?r.getFieldIndex(i):-1)>-1)throw new Error(this._moduleName+'::addField(): field "'+i+'" already exists');this._touchData(),r.add(e,t)},removeField:function(e){var t=this._getFieldsFormat(),i=t?t.getFieldIndex(e):-1;if(-1===i)throw new ReferenceError(this._moduleName+'::removeField(): field "'+e+"\" doesn't exist");this._touchData(),t.removeAt(i)},removeFieldAt:function(e){this._touchData();var t=this._getFieldsFormat();if(t)t.removeAt(e)},_touchData:function(){},_isValidData:function(){return true},_getFieldsFormat:function(){throw new Error("Method must be implemented")},_getFieldMeta:function(e){if(null===this._sharedFieldMeta)this._sharedFieldMeta={};var t=this.getFormat(e),i=this._sharedFieldMeta;switch(t.getType()){case"Real":case"Money":i.precision=t.getPrecision();break;case"Enum":case"Flags":i.dictionary=t.getDictionary();break;case"Identity":i.separator=t.getSeparator();break;case"Array":i.kind=t.getKind()}return i}};t.default=i});
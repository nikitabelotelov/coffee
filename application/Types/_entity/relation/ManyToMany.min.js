define("Types/_entity/relation/ManyToMany",["require","exports","tslib","Types/_entity/DestroyableMixin","Types/shim"],function(e,t,s,o,a){"use strict";function n(e){return e instanceof Object&&e["[Types/_entity/DestroyableMixin]"]?!e.destroyed:true}Object.defineProperty(t,"__esModule",{value:true});var i=function(t){function e(){var e=t.call(this)||this;return e._hasMany=new a.Map,e._hasManyName=new a.Map,e._belongsTo=new a.Map,e._belongsToName=new a.Map,e}return s.__extends(e,t),e.prototype.destroy=function(){this._hasMany=null,this._hasManyName=null,this._belongsTo=null,this._belongsToName=null,t.prototype.destroy.call(this)},e.prototype.addRelationship=function(e,t,s){this._addHasMany(e,t,s),this._addBelongsTo(t,e,s)},e.prototype.removeRelationship=function(e,t){this._removeHasMany(e,t),this._removeBelongsTo(t,e)},e.prototype.clear=function(t){var s=this;if(this._hasMany.has(t))this._hasMany.get(t).forEach(function(e){s._removeBelongsTo(e,t)}),this._hasMany.delete(t),this._hasManyName.delete(t);if(this._belongsTo.has(t))this._belongsTo.get(t).forEach(function(e){s._removeHasMany(e,t)}),this._belongsTo.delete(t),this._belongsToName.delete(t)},e.prototype.hasMany=function(e,t){var s=this;if(this._hasMany.has(e)){var o=this._hasManyName.get(e);this._hasMany.get(e).forEach(function(e){if(n(e))t.call(s,e,o.get(e))})}},e.prototype.belongsTo=function(e,t){var s=this;if(this._belongsTo.has(e)){var o=this._belongsToName.get(e);this._belongsTo.get(e).forEach(function(e){if(n(e))t.call(s,e,o.get(e))})}},e.prototype._addHasMany=function(e,t,s){var o,n;if(this._hasMany.has(e))o=this._hasMany.get(e),n=this._hasManyName.get(e);else o=new a.Set,n=new a.Map,this._hasMany.set(e,o),this._hasManyName.set(e,n);o.add(t),n.set(t,s)},e.prototype._removeHasMany=function(e,t){if(this._hasMany.has(e)){var s=this._hasMany.get(e);if(s.delete(t),this._hasManyName.get(e).delete(t),0===s.size)this._hasMany.delete(e),this._hasManyName.delete(e)}},e.prototype._addBelongsTo=function(e,t,s){var o,n;if(this._belongsTo.has(e))o=this._belongsTo.get(e),n=this._belongsToName.get(e);else o=new a.Set,n=new a.Map,this._belongsTo.set(e,o),this._belongsToName.set(e,n);o.add(t),n.set(t,s)},e.prototype._removeBelongsTo=function(e,t){if(this._belongsTo.has(e)){var s=this._belongsTo.get(e);if(s.delete(t),this._belongsToName.get(e).delete(t),0===s.size)this._belongsTo.delete(e),this._belongsToName.delete(e)}},e}(o.default);(t.default=i).prototype["[Types/_entity/relation/ManyToMany]"]=true,i.prototype._hasMany=null,i.prototype._hasManyName=null,i.prototype._belongsTo=null,i.prototype._belongsToName=null});